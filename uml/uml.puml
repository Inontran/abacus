@startuml
View "1" *-- "1" WidgetContainer
View "1" *-- "1.." Handle
View "1" *-- "1" Range
View "1" *-- "1.." Tooltip
View "1" *-- "0.." Mark
Range "1" *-- "1" RangeType

View "1" -- "1" Presenter
Model "1" -- "1" Presenter

AbacusProperty "1" *-- "1" AbacusOrientationType
AbacusProperty <|-- AbacusOptions
Model "1" *-- "1" AbacusProperty
EventUIData "0.." *-- "1" AbacusProperty

JQuery "1" <-- "1" Abacus

enum AbacusOrientationType {
    HORIZONTAL
    VERTICAL
}

class Model {
    -_abacusProperty: AbacusProperty
    -_eventTarget: EventTarget
    -_eventUpdateModel: CustomEvent<any>
    +abacusProperty(): AbacusProperty
    +setAbacusProperty(newAbacusProperty: AbacusOptions | AbacusProperty)
    +eventTarget(): EventTarget
    +roundValuePerStep(value: number): number
    +{static} countNumAfterPoint(x: number): number
    +{static} round(value: number, fractionalNum: number): number
}
class Presenter {
    -_model: Model
    -_eventTarget: EventTarget
    -_eventUpdateModel: CustomEvent<any>
    +getModelAbacusProperty(): AbacusProperty
    +setModelAbacusProperty(abacusProperty: AbacusOptions | AbacusProperty): void
    -_bindEventListeners(): void
    -_updateModelHandler(): void
    +eventTarget(): EventTarget
}
class WidgetContainer {
    -_htmlElement: HTMLElement
    -_width: number
    -_className: string
    -_classNameDisabled: string
    -_classNameVertical: string
    +width(): number
    +width(width : number)
    +htmlElement(): HTMLElement
    +className(): string
    +className(name : string)
    +classNameDisabled(): string
    +classNameDisabled(name : string)
    +classNameVertical(): string
    +classNameVertical(name : string)
    +isDisabled(value: boolean): void
    +isVertical(value: boolean): void
}
class Handle {
    -_htmlElement: HTMLElement
    -_posLeft: number | null
    -_posBottom: number | null
    -_handleIndex: number
    -_className: string
    +posLeft(): number | null
    +posLeft(left : number)
    +posBottom(): number | null
    +posBottom(bottom : number)
    +htmlElement:() HTMLElement
    +handleIndex(): number
    +className(): string
    +className(name : string)
}
class Range {
    -_htmlElement: HTMLElement
    -_width: number | null
    -_height: number | null
    -_className: string
    -_rangeType: RangeType
    +width(): number | null
    +width(width: number)
    +height(): number | null
    +height(height: number)
    +htmlElement(): HTMLElement
    +className(): string
    +className(name : string)
    +rangeType(): string
    +rangeType(value : string)
}
enum RangeType {
    HIDDEN
    MIN
    MAX
    BETWEEN
}
class Mark {
    -_htmlElement: HTMLElement
    -_className: string
    -_classNameInrange: string
    -_isInrange: boolean
    -_classNameSelected: string
    -_isSelected: boolean
    -_posLeft: number | null
    -_posBottom: number | null
    -_associatedValue: number
    +htmlElement(): HTMLElement
    +className(): string
    +className(name: string)
    +classNameInrange(): string
    +classNameInrange(name: string)
    +classNameSelected(): string
    +classNameSelected(name: string)
    +posLeft(): number | null
    +posLeft(left: number)
    +posBottom(): number | null
    +posBottom(bottom: number)
    +associatedValue() : number
    +associatedValue(value : number)
    +isInrange(value?: boolean | undefined): boolean
    +isSelected(value?: boolean | undefined): boolean
}
class Tooltip {
    -_htmlElement: HTMLElement
    -_tooltipIndex: number
    -_className: string
    -_classNameVisible: string
    -_posLeft: number | null
    -_posBottom: number | null
    +htmlElement(): HTMLElement
    +className(): string
    +className(name: string)
    +classNameVisible(): string
    +classNameVisible(name: string)
    +posLeft(): number | null
    +posLeft(left: number)
    +posBottom(): number | null
    +posBottom(bottom: number)
}
class View {
    -_presenter: Presenter
    -_widgetContainer: WidgetContainer
    -_range: Range
    -_handles: Handle[]
    -_tooltips: Tooltip[]
    -_customEventChange: CustomEvent<any>
    -_customEventCreate: CustomEvent<any>
    -_customEventSlide: CustomEvent<any>
    -_customEventStart: CustomEvent<any>
    -_customEventStop: CustomEvent<any>
    -_isDisabled: boolean
    -_isDragHandle: boolean
    -_handleMovingTimer: NodeJS.Timeout | null
    -_mapScale: Map<number, Mark>
    -_cachedAbacusProperty: AbacusProperty
    -_isVertical: boolean
    -_currentHandle?: Handle | undefined
    +getProperties(): AbacusProperties
    +getProperties(optionName: string): number | string | number[] | boolean | AbacusClasses | undefined
    +getWidget(): HTMLElement
    +setProperties(abacusOptions: AbacusOptions): void
    +setProperties(optionName: string, propValue: any): void
    -_createViewHandles(abacusProperty: AbacusProperty): void
    -_updateViewHandles(abacusProperty: AbacusProperty): void
    -_createViewTooltips(abacusProperty: AbacusProperty): void
    -_updateViewTooltips(abacusProperty: AbacusProperty): void
    -_createViewRange(abacusProperty: AbacusProperty): void
    -_updateViewRange(abacusProperty: AbacusProperty): void
    -_updateClassNames(abacusClasses: AbacusClasses): void
    -_toggleDisable(off?: boolean | undefined): void
    -_getEventUIData(): EventUIData
    -_eventChangeWrapper(event?: Event | undefined): boolean
    -_eventCreateWrapper(event?: Event | undefined): boolean
    -_eventSlideWrapper(event?: Event | undefined): boolean
    -_eventStartWrapper(event?: Event | undefined): boolean
    -_eventStopWrapper(event?: Event | undefined): boolean
    -_mouseHandler(event: PointerEvent): void
    -_calcHandleValues(valueUnrounded: number): void
    -_bindEventListeners(): void
    -_updateModelHandler(): void
    -_handlerWidgetContainerClick(event: PointerEvent): void
    -_handlerHandleItemClickStart(event: PointerEvent): void
    -_handlerHandleItemClickMove(event: PointerEvent): void
    -_handlerHandleItemClickStop(event: PointerEvent): void
    -_createScale(): void
    -_removeScale(): void
    -_thinOutScale(): void
    -_highlightMarks(): void
    -_bindEventListenersOnMarks(): void
    -_setTransition(): void
    -_getCloneAbacusProperty(abacusProperty: AbacusProperty): AbacusProperty
    -_getPosPercent(coordXY: number): number
    -_getPosFromValue(value: number): number
    -_getValFromPosPercent(posPercent: number): number
    -_findMovedHandle(): Handle
    -_updateView(): void
    +{static} countNumAfterPoint(x: number): number
    +{static} round(value: number, fractionalNum: number): number
    +{static} arrayCompare(a?: any[] | undefined, b?: any[] | undefined): boolean
}

interface AbacusClasses {
    +abacus: string;
    +vertical: string;
    +disabled: string;
    +handle: string;
    +range: string;
    +mark: string;
    +markSelected: string;
    +markInrange: string;
    +tooltip: string;
}

interface AbacusOptions {
    +animate?: string | number | boolean | undefined
    +classes?: AbacusClasses | undefined
    +isDisabled?: boolean | undefined
    +max?: number | undefined
    +min?: number | undefined
    +orientation?: string | undefined
    +range?: string | boolean | undefined
    +hasMarks?: boolean | undefined
    +step?: number | undefined
    +hasTooltip?: boolean | undefined
    +values?: number[] | undefined
    +change?: ((event: Event, ui: EventUIData) => void) | undefined
    +create?: ((event: Event, ui: EventUIData) => void) | undefined
    +slide?: ((event: Event, ui: EventUIData) => void) | undefined
    +start?: ((event: Event, ui: EventUIData) => void) | undefined
    +stop?: ((event: Event, ui: EventUIData) => void) | undefined
}

interface AbacusProperty {
    +animate: string | number | boolean
    +classes: AbacusClasses
    +isDisabled: boolean
    +max: number
    +min: number
    +orientation: AbacusOrientationType
    +range: string | boolean
    +hasMarks: boolean
    +step: number
    +hasTooltip: boolean
    +values: number[]
}

interface Abacus{
    +(options ?: AbacusOptions): JQuery;
}

interface JQuery{
    abacus: Abacus
}

interface EventUIData {
    +handle: HTMLElement
    +handleIndex: number
    +abacusProperty: AbacusProperty
}
@enduml